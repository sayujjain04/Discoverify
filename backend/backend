import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import textwrap, random

import requests
import base64
import json

import os
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials, SpotifyOAuth


client_id = '80d232eeaa064241b531967dfaccb515'
client_secret = '6b5084a5a9834bcb974bfb4d6c2a96d9'
redirect_uri = "https://localhost:4000"  # Set up in your Spotify Developer Dashboard

# Define the Spotify token endpoint URL
token_url = 'https://accounts.spotify.com/api/token'
# urls that will be used to interact with the spotify api
SPOTIFY_API_TOKEN_URL = 'https://accounts.spotify.com/api/token'
SPOTIFY_API_SEARCH_URL = 'https://api.spotify.com/v1/search'

# Authentication headers
# storing cause required for making authorized requests to the Spotify API
HEADERS = {}

# Function to obtain an access token from Spotify
def get_access_token():
    global HEADERS
    if 'access_token' not in HEADERS:
        # Create a Base64 encoded string with the client ID and client secret
        auth_str = f'{client_id}:{client_secret}'
        auth_b64 = base64.b64encode(auth_str.encode()).decode()
        headers = {
            'Authorization': f'Basic {auth_b64}',
        }
        data = {
            'grant_type': 'client_credentials',
        }
        # Request an access token from Spotify using client credentials
        response = requests.post(SPOTIFY_API_TOKEN_URL, headers=headers, data=data)
        access_token = json.loads(response.text)['access_token']
        HEADERS['Authorization'] = f'Bearer {access_token}'

print(HEADERS)
get_access_token()
print(HEADERS)

headers = {
    'Authorization': 'Bearer {token}'.format(token=access_token)
}

# base URL of all Spotify API endpoints
BASE_URL = 'https://api.spotify.com/v1/'

# Track ID from the URI
track_id = '01HMOGsamT08BvQ7XQqXBI'

# actual GET request with proper header
r = requests.get(BASE_URL + 'audio-features/' + track_id, headers=headers)

r = r.json()
r



# week 8-9


import spotipy
from spotipy.oauth2 import SpotifyOAuth
from sklearn.cluster import KMeans



def shuffle_playlist_by_bpm_and_danceability(playlist_id, spotify_client):
    # Retrieve the tracks and their audio features from the playlist
    tracks = spotify_client.playlist_tracks(playlist_id)
    print(len(tracks))

    # print(tracks["items"])

    for i in tracks["items"]: # takes every track
      print('{:40s}{}'.format(i['track']['name'], i['track']['id']))


    print()
    track_ids = [track['track']['id'] for track in tracks['items']]
    audio_features = spotify_client.audio_features(track_ids)

    # Extract the relevant features for each track
    features_list = []
    for features in audio_features:
        features_list.append([
            features['energy'],
            features['key'],
            features['valence'],
            features['tempo']
    ])

    for i in features_list:
      print(i)

    # Use k-means clustering to group similar songs
    # Number of clusters (k) is arbitrary; you can adjust based on your preference
    kmeans = KMeans(n_clusters=5, random_state=0).fit(features_list)
    clusters = kmeans.labels_

    print(clusters)

    # Pair track IDs with their clusters and sort by cluster
    # Then, within each cluster, sort by tempo
    sorted_tracks = sorted(zip(track_ids, clusters, features_list), key=lambda x: (x[1], x[2][3]))

    # Extract the sorted track IDs
    sorted_track_ids = [track[0] for track in sorted_tracks]

    print(len(sorted_tracks) == len(tracks))
    print(len(sorted_tracks), len(tracks))
    return sorted_track_ids

# Setup Spotify client with your token
with open("spotify_token.txt", "r") as f:
    token = f.read().strip()

spotify_client = spotipy.Spotify(auth=token)

# Get the sorted playlist
playlist_id = "1mSPjuL0spUjUkeK965epf"
sorted_playlist = shuffle_playlist_by_bpm_and_danceability(playlist_id, spotify_client)   # so this basically pushes
print()

for i in sorted_playlist:
  print(i)


