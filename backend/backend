import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import textwrap, random

import requests
import base64
import json

import os
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials, SpotifyOAuth


client_id = '80d232eeaa064241b531967dfaccb515'
client_secret = '6b5084a5a9834bcb974bfb4d6c2a96d9'
redirect_uri = "https://localhost:4000"  # Set up in your Spotify Developer Dashboard

# Define the Spotify token endpoint URL
token_url = 'https://accounts.spotify.com/api/token'
# urls that will be used to interact with the spotify api
SPOTIFY_API_TOKEN_URL = 'https://accounts.spotify.com/api/token'
SPOTIFY_API_SEARCH_URL = 'https://api.spotify.com/v1/search'

# Authentication headers
# storing cause required for making authorized requests to the Spotify API
HEADERS = {}

# Function to obtain an access token from Spotify
def get_access_token():
    global HEADERS
    if 'access_token' not in HEADERS:
        # Create a Base64 encoded string with the client ID and client secret
        auth_str = f'{client_id}:{client_secret}'
        auth_b64 = base64.b64encode(auth_str.encode()).decode()
        headers = {
            'Authorization': f'Basic {auth_b64}',
        }
        data = {
            'grant_type': 'client_credentials',
        }
        # Request an access token from Spotify using client credentials
        response = requests.post(SPOTIFY_API_TOKEN_URL, headers=headers, data=data)
        access_token = json.loads(response.text)['access_token']
        HEADERS['Authorization'] = f'Bearer {access_token}'

print(HEADERS)
get_access_token()
print(HEADERS)

headers = {
    'Authorization': 'Bearer {token}'.format(token=access_token)
}

# base URL of all Spotify API endpoints
BASE_URL = 'https://api.spotify.com/v1/'

# Track ID from the URI
track_id = '01HMOGsamT08BvQ7XQqXBI'

# actual GET request with proper header
r = requests.get(BASE_URL + 'audio-features/' + track_id, headers=headers)

r = r.json()
r
import random
import spotipy

def shuffle_playlist_by_bpm_and_danceability(playlist_id, spotify_client):

    # Get the BPM and danceability of each song in the playlist.
    playlist_songs = spotify_client.playlist_tracks(playlist_id)
    song_features = []
    for song in playlist_songs['items']:
        song_features.append({
            'id': song['track']['id'],
            'bpm': song['track']['audio_features']['tempo'],
            'danceability': song['track']['audio_features']['danceability']
        })

    # Sort the songs by BPM and danceability.
    song_features.sort(key=lambda song: song['bpm'])
    song_features.sort(key=lambda song: song['danceability'], reverse=True)

    # # Shuffle the sorted playlist.
    # random.shuffle(song_features)

    # Output the shuffled playlist.
    shuffled_playlist = []
    for song in song_features:
        shuffled_playlist.append(song['id'])

    return shuffled_playlist

spotify_client = spotipy.Spotify(auth_manager=spotipy.oauth2.SpotifyOAuth(client_id=client_id, client_secret=client_secret, redirect_uri=redirect_uri))

playlist_id = "3dhjv8GHt3Uqo4h7T4nII5"

shuffled_playlist = shuffle_playlist_by_bpm_and_danceability(playlist_id, spotify_client)


def get_song_id_from_spotify_url(url):
    # Split the URL by '/'
    parts = url.split('/')
    
    # Get the last part of the split URL, which should contain the song ID
    song_id = parts[-1]
    
    # If the song ID contains a query string (?si=...), remove it
    song_id = song_id.split('?')[0]
    
    return song_id
